---
title: Metida validation report
author:
date: `j import Dates; Dates.Date(Dates.now())`
mainfont: romanuni.ttf
sansfont: NotoSans-Regular.ttf
monofont: NotoSansMono-Regular.ttf
mathfont: texgyredejavu-math.otf
---

```julia; echo = false
using Dates
```

\pagebreak

# Introduction and package description
Multilevel models (also known as hierarchical linear models, linear mixed-effect model, mixed models, nested data models, random coefficient, random-effects models, random parameter models, or split-plot designs) are statistical models of parameters that vary at more than one level. An example could be a model of student performance that contains measures for individual students as well as measures for classrooms within which the students are grouped. These models can be seen as generalizations of linear models (in particular, linear regression), although they can also extend to non-linear models. These models became much more popular after sufficient computing power and software became available.
Metida.jl is Julia package for fitting mixed-effects models with flexible covariance structure.

Stable documentation: [https://pharmcat.github.io/Metida.jl/stable/](https://pharmcat.github.io/Metida.jl/stable/)

## Validation purpose

The main validation purpose is confirmation by examination and provision of objective evidence that software
specifications conform to user needs and intended uses, and that the particular requirements
implemented through software can be consistently fulfilled.

Mixed model fittin is a complex task, many factors such as initial conditions, random- and repeated- effect model,
the data structure can affect on final results. Metida.jl has many variants of settings, it's not possible to
check all combinations of them. In the scope of validation, each public method will be tested at least once.
For critical tasks, wide data examples will be analyzed for the deep check.

## Requirements

  * Julia 1.5.* (or higher) installed
  * Julia packages from dependence list installed (see [Project.toml](https://github.com/PharmCat/Metida.jl/blob/master/Project.toml))

## Developer software life cycle

  * Development stage
  * Testing procedures development
  * Performing testing procedures on local machine
  * Push to master branch
  * Performing testing procedures with GitHub Actions
  * Make pull request to the official registry of general Julia packages (if nessesary)
  * Make release (if previous completed)

### Versions

  * X.Y.Z - patch release (no breaking changes)
  * X.Y.# - minor release (may include breaking changes)
  * X.#.# - major release (breaking changes, changes in public API)
  * 0.#.# - no stable public API
  * ≥1.#.# - stable public API


## Build support

### Tier 1

  * julia-version: 1.5
  * julia-arch: x64
  * os: ubuntu-18.04, macos-10.15, windows-2019

\pagebreak

# Installation

## System information

 * Julia version: `j Sys.VERSION`
 * Current machine: `j Sys.MACHINE`

## Installation method

Metida.jl can be installed by executing the following command in REPL.

```julia; eval = false
import Pkg; Pkg.add("Metida")
```

## Version check

The installation process is checking within each testing job via GitHub Actions.
Also GitHub Action [chek](https://github.com/JuliaRegistries/General/blob/master/.github/workflows/automerge.yml)
performed before merging into JuliaRegistries/General repository
(see [Automatic merging of pull requests](https://github.com/JuliaRegistries/General#automatic-merging-of-pull-requests)).

```julia; echo = false; results = "hidden"
using Metida, Pkg
pkgversion(m::Module) = Pkg.TOML.parsefile(joinpath(dirname(string(first(methods(m.eval)).file)), "..", "Project.toml"))["version"]
ver = pkgversion(Metida)
```

Current package version:
```julia; echo = false; results = "tex"
ver
```

\pagebreak

# Operation qualification

This part of validation based on testing procedures entails running software products under known conditions with defined inputs and
documented outcomes that can be compared to their predefined expectations. All documented public API included in testing procedures and part of
critical internal methods.

## Coverage

Code coverage report available on [Codecov.io](https://app.codecov.io/gh/PharmCat/Metida.jl).
Test procedures include all  public API methods check.

* Coverage goal: ≥ 90.0%

## Data

For operation checks generated data used. For any purpose,
this data available in the repository and included in the package.

Datasets:

    * df0 - 20 obs, 5 subjects, complete
    * df1 - 24 obs, 8 subjects, incomplete
    * 1fptime - 400 obs, 40 subjects
    * 1freparma - 240 obs, 24 subjects
    * 2f2rand - 168 obs, 24 subjects

## Testing results

```julia
Pkg.test("Metida")
```

\pagebreak

# Performance qualification

Purpose of this testing procedures to demonstrate performance for some critical tasks. Main goal - not to
demonstrate all capabilities of the software, but to ensure that the analysis of specific narrow tasks is correct
for wide data examples. As reference data was taken public datasets, then software output comparing with results
in publication and with results from other statistical software: MixedModels.jl, IBM SPSS.

## Bioequivalence

Bioequivalence reference datasets were used to validate performance for this task.
Model B and model C are in validation scope.

#### Model B Metida example

```
lmm =  LMM(@formula(lnpk~sequence+period+treatment), dfrds;
random =  VarEffect(Metida.@covstr(1|subject),  SI),
)
fit!(lmm)
```

##### Model B SPSS example

```
MIXED lnpk BY period sequence treatment subject
  /CRITERIA=DFMETHOD(SATTERTHWAITE) CIN(95) MXITER(100) MXSTEP(10) SCORING(1)
    SINGULAR(0.000000000001) HCONVERGE(0, ABSOLUTE) LCONVERGE(0, ABSOLUTE)
    PCONVERGE(0.000001, ABSOLUTE)
  /FIXED=period sequence treatment | SSTYPE(3)
  /METHOD=REML
  /RANDOM= subject(sequence) | COVTYPE(ID)
  /EMMEANS=TABLES(treatment) COMPARE REFCAT(FIRST) ADJ(LSD).
```

#### Model C Metida example

```
lmm =  LMM(@formula(lnpk~sequence+period+treatment), dfrds;
    random =  VarEffect(Metida.@covstr(treatment|subject),  CSH),
    repeated =  VarEffect(Metida.@covstr(treatment|subject),  DIAG),
    )
     fit!(lmm)
```

#### Model C SPSS example

```
MIXED lnpk BY period treatment sequence subject
  /CRITERIA=CIN(90) MXITER(200) MXSTEP(20) SCORING(2) SINGULAR(0.000000000001)
  HCONVERGE(0, RELATIVE) LCONVERGE(0.0000000000001, RELATIVE)
  PCONVERGE(0, RELATIVE)
  /FIXED=period treatment sequence | SSTYPE(3)
  /METHOD=REML
  /RANDOM=treatment | SUBJECT(subject) COVTYPE(CSH)
  /REPEATED=treatment | SUBJECT(subject*period) COVTYPE(DIAG)
  /EMMEANS=TABLES(treatment) COMPARE REFCAT(FIRST) ADJ(LSD).
```

The following parameters were used to comparation:

  * REML value
  * Upper 90% confidence interval
  * Lower 90% confidence interval

\pagebreak

#### Results

```julia; echo = false
include(joinpath(dirname(pathof(Metida)), "..", "test", "validation_init.jl"));
include(joinpath(dirname(pathof(Metida)), "..", "test", "validation_s3.jl"))
```

\pagebreak

# Glossary

  * Installation qualification (IQ) - Establishing confidence that process equipment and ancillary systems are compliant with appropriate codes and approved design intentions, and that manufacturer's recommendations are suitably considered.
  * Operational qualification (OQ) Establishing confidence that process equipment and sub-systems are capable of consistently operating within established limits and tolerances.
  * Product performance qualification (PQ) - Establishing confidence through appropriate testing that the finished product produced by a specified process meets all release requirements for functionality and safety.
  * Repository - GitHub repository: https://github.com/PharmCat/Metida.jl
  * Master branch - main branch on GitHub ([link](https://github.com/PharmCat/Metida.jl/tree/master)).
  * Current machine - pc that used for validation report generating.

# Reference

* [General Principles of Software Validation; Final Guidance for Industry and FDA Staff](https://www.fda.gov/media/73141/download)
* [Guidance for Industry Process Validation: General Principles and Practices](https://www.fda.gov/files/drugs/published/Process-Validation--General-Principles-and-Practices.pdf)
* [Glossary of Computer System Software Development Terminology](https://www.fda.gov/inspections-compliance-enforcement-and-criminal-investigations/inspection-guides/glossary-computer-system-software-development-terminology-895)
